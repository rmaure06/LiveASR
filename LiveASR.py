import glob
import re
from tkinter import *

fenetre = Tk()
p = PanedWindow(fenetre, orient=HORIZONTAL)
airports = glob.glob(".\\Profiles\\*.txt")

# ---------------- Importing settings ------------------
settingsFile = open('.\\Settings.ini','r')
activeList = settingsFile.read().split('\n')
activeList.remove('')
sorted(activeList)
settingsFile.close()

#----------------- Default ASR -------------------------
sourceASR = open('.\\Source.asr','r')
defaultContent = sourceASR.read()
sourceASR.close()

# ----------------- Constantes --------------------------
check = u"\u2611" #2705
square = u"\u2610"

# ----------------- UI -------------------------------
icao_display_list = Listbox(p)
config_display_list = Listbox(p)
cb_display_list = Listbox(p) 

""" _________________________________________ Functions ________________________________________"""

def extract_sections(file_path):
    # Dictionary to store section names and their corresponding text
    sections = {}
    
    # Open and read the entire file content
    with open(file_path, 'r') as file:
        content = file.read()
    file.close()

    # Split the content based on the pattern "&& Name"
    # Using regex to capture each section header and its corresponding text
    pattern = r'&&\s*(.*?)\s*&&(.*?)(?=(&&.*?&&)|\Z)'  # Match "&& Name" and the following text until the next "&&" or EOF
    matches = re.findall(pattern, content, re.DOTALL)

    # Iterate over matches to populate the sections dictionary
    for match in matches:
        section_name = match[0].strip()  # Extract section name (e.g., Name)
        section_text = match[1].strip()  # Extract section text
        sections[section_name] = section_text
    
    return sections

def generateASR():
    print('Generating ASR...')
    dataList=[defaultContent]
    newASR = open('.\\ASR\\Autogenerated.asr','w')
    for config in activeList:
        airport = config[:4]
        sections = extract_sections(f'.\\Profiles\\{airport}.txt')
        dataList.append(f'{sections[config]}\n')
    newASR.writelines(dataList)
    newASR.close()
    print('ASR generated')
        
         
def airportSelection(event):
    selection = event.widget.curselection()
    if selection:
        index = selection[0]
        read_configs(index)
        
def cbSelection(event):
    selection = event.widget.curselection()
    if selection:
        index = selection[0]
        data = event.widget.get(index)
        config = config_display_list.get(index)
        
        if config not in activeList: #Activating
            config_display_list.itemconfig(index, {'bg':'green'})
            cb_display_list.delete(index)
            cb_display_list.insert(index, check)
            activeList.append(config)
            print(f'{config} activated')
            
        else: #Deactivating
            config_display_list.itemconfig(index, {'bg':'red'})
            cb_display_list.delete(index)
            cb_display_list.insert(index, square)
            activeList.remove(config)
            print(f'{config} deactivated')
        

def startUp():
        
    # -------------------------- List existing airport profiles --------------------------
    icao_list = []
    
    for airport in airports:
         icao_list.append(airport[-8:-4])
    
    for i in range(len(icao_list)):
        icao_display_list.insert(i, icao_list[i])
        
    
    airport_nbr = 0
    read_configs(airport_nbr)
    
    
def read_configs(airport_nbr):
    
    file_path = r'{}'.format(airports[airport_nbr])
    configs = extract_sections(file_path)
    
    config_display_list.delete(0,END)
    cb_display_list.delete(0,END)
    
    
    
    # Print the configs and their content
    i=0 #Config number
    for config, text in configs.items():
        config_display_list.insert(i,config)
        
        
        if config in activeList:
            config_display_list.itemconfig(i, {'bg':'green'})
            cb_display_list.insert(i, check)
        else:
            config_display_list.itemconfig(i, {'bg':'red'})
            cb_display_list.insert(i,  square)
        i+=1
    
     
    return icao_display_list, config_display_list

def resetASR():
    activeList.clear()
    existing = read_configs(0)
    for j in range(1,existing[0].size()):
        read_configs(j)
    

"""___________________________________________ Affichage ___________________________________________"""

startUp()

fenetre.title('LiveASR')

label = Label(fenetre, text="LiveASR", font=("Helvetica", 14), pady=10)
label.pack()

AsrButton=Button(fenetre, text="Generate ASR file", command=generateASR)
AsrButton.pack()

resetButton=Button(fenetre, text="Reset all configurations", command=resetASR)
resetButton.pack()

p.pack(side=TOP, expand=Y, fill=BOTH, pady=2, padx=2)
p.add(icao_display_list, width=50)
p.add(config_display_list, width=140)
p.add(cb_display_list, width=20)
p.pack()

icao_display_list.bind("<<ListboxSelect>>", airportSelection)
cb_display_list.bind("<<ListboxSelect>>", cbSelection)

fenetre.mainloop()

settingsFile = open('./Settings.ini','w')
settingsFile.writelines([f'{act}\n' for act in activeList if act != ''])
settingsFile.close()

