import glob
import re
import os
from tkinter import *
from tkinter.filedialog import askopenfilename
from functools import partial

# ----------------- Characters --------------------------
check = u"\u2611" #2705
square = u"\u2610"


""" _________________________________________ Functions ________________________________________"""

#----------------- Startup function -------------------------

def startUp():
        
    # -------------------------- List existing airport profiles --------------------------
    icao_list = []
    
    for airport in airports:
         icao_list.append(airport[-8:-4])
    
    for i in range(len(icao_list)):
        icao_display_list.insert(i, icao_list[i])
        
    
    airport_nbr = 0
    read_configs(airport_nbr)



#----------------- General functions -------------------------
    
def airportSelection(event):
    selection = event.widget.curselection()
    if selection:
        index = selection[0]
        read_configs(index)


def cbSelection(event):
    selection = event.widget.curselection()
    if selection:
        index = selection[0]
        data = event.widget.get(index)
        config = config_display_list.get(index)
        
        if config not in activeList: #Activating
            config_display_list.itemconfig(index, {'bg':'green'})
            cb_display_list.delete(index)
            cb_display_list.insert(index, check)
            activeList.append(config)
            
        else: #Deactivating
            config_display_list.itemconfig(index, {'bg':'red'})
            cb_display_list.delete(index)
            cb_display_list.insert(index, square)
            activeList.remove(config)


def read_configs(airport_nbr):
    
    file_path = r'{}'.format(airports[airport_nbr])
    if os.path.isfile(file_path):
        configs = extract_sections(file_path)
        
        config_display_list.delete(0,END)
        cb_display_list.delete(0,END)
        
        
        
        # Print the configs and their content
        i=0 #Config number
        for config, text in configs.items():
            config_display_list.insert(i,config)
            
            
            if config in activeList:
                config_display_list.itemconfig(i, {'bg':'green'})
                cb_display_list.insert(i, check)
            else:
                config_display_list.itemconfig(i, {'bg':'red'})
                cb_display_list.insert(i,  square)
            i+=1
        
         
        return icao_display_list, config_display_list


def restart_program():
    promptWindow = Toplevel(fenetre)
    promptWindow.title(f'Error') 
    promptWindow.iconbitmap("radar.ico")
    
    Label(promptWindow, text=f"Please restart for the changes to take effects", font=("Helvetica", 12), padx=10, pady=10).pack(side=TOP)

    confirmButton = Button(promptWindow, text="OK", command=lambda: promptWindow.destroy())
    confirmButton.pack(side=RIGHT, anchor='s', padx=5, pady=10)


#----------------- Generate ASR functions -------------------------

def generateASR():
    dataList=[defaultContent]
    with open('.\\ASR\\Autogenerated.asr','w') as newASR:
        for config in activeList:
            airport = config[:4]
            sections = extract_sections(f'.\\Profiles\\{airport}.txt')
            dataList.append(f'{sections[config]}\n')
        newASR.writelines(dataList)


def extract_sections(file_path):
    # Dictionary to store section names and their corresponding text
    sections = {}
    
    # Open and read the entire file content
    with open(file_path, 'r') as file:
        content = file.read()
    file.close()

    # Split the content based on the pattern "&& Name"
    # Using regex to capture each section header and its corresponding text
    pattern = r'&&\s*(.*?)\s*&&(.*?)(?=(&&.*?&&)|\Z)'  # Match "&& Name" and the following text until the next "&&" or EOF
    matches = re.findall(pattern, content, re.DOTALL)

    # Iterate over matches to populate the sections dictionary
    for match in matches:
        section_name = match[0].strip()  # Extract section name (e.g., Name)
        section_text = match[1].strip()  # Extract section text
        sections[section_name] = section_text
    
    return sections


#----------------- Reset selection functions -------------------------

def resetASR():
    activeList.clear()
    existing = read_configs(0)
    for j in range(1,existing[0].size()):
        read_configs(j)


#----------------- Create profile functions -------------------------
    
def createProfile():
    
    profWindow = Toplevel(fenetre)
    profWindow.title('New profile') 
    profWindow.iconbitmap("radar.ico")
    
    newTitle = Label(profWindow, text="New profile", font=("Helvetica", 12), pady=2).pack(side=TOP)
    Label(profWindow, text='Restart needed for changes to take effect').pack(side=TOP)
    
    Lines = Frame(profWindow,pady=10,padx=10)
    Lines.pack(side=TOP)
    Line1 = Frame(Lines,pady=5,padx=10)
    Line1.pack(side=TOP)
    Line2 = Frame(Lines,pady=5,padx=10)
    Line2.pack(side=TOP)
    Line3 = Frame(Lines,pady=5,padx=10)
    Line3.pack(side=TOP)
    Line4 = Frame(Lines,pady=5,padx=10)
    Line4.pack(side=TOP)
    Line5 = Frame(Lines,pady=5,padx=10)
    Line5.pack(side=TOP)
    
    with open('Settings.ini','r') as settingsFile :
        settingsList = settingsFile.readlines()
        base_file, custom_file = settingsList[0], settingsList[1]
        
    
    icaoLabel = Label(Line1, text='ICAO',padx=10)
    icao=StringVar(Line1)
    icaoEntry = Entry(Line1, textvariable=icao, width = 10)
    profNameLabel = Label(Line2, text='Profile Name',padx=10)
    profNameEntry = Text(Line2, height=1, width = 15)
    sourceLabel = Label(Line3, text=base_file)
    sourceButton = Button(Line3, text='Select base ASR',command=partial(select_base_file,sourceLabel))
    customLabel = Label(Line4, text=custom_file)
    customButton = Button(Line4, text='Select customized ASR',command=partial(select_custom_file,customLabel))
    sendButton = Button(Line5, text='Create profile', command=lambda: compareASR(icaoEntry.get().strip('\n'), profNameEntry.get("1.0", END).strip('\n')))
    
    icaoLabel.pack(side=LEFT)
    icaoEntry.pack(side=LEFT)
    profNameLabel.pack(side=LEFT)
    profNameEntry.pack(side=LEFT)
    sourceButton.pack(side=LEFT)
    sourceLabel.pack(side=LEFT)
    customButton.pack(side=LEFT)
    customLabel.pack(side=LEFT)
    sendButton.pack(side=LEFT)


def select_base_file(sourceLabel):
    with open('.\\Settings.ini','r+') as settingsFile:
        last_folder = settingsFile.read().split('\n')[0].rpartition('/')[0]
        
    filetypes = ( ('ASR files', '*.asr'),('All files', '*.*'))
    base_path = askopenfilename(title = 'Select the source ASR', initialdir = last_folder, filetypes=filetypes)
    sourceLabel.config(text = base_path)
    
    with open('.\\Settings.ini','r+') as settingsFile:
        settingsList = settingsFile.read().split('\n')
        settingsList[0] = base_path
        
    with open('.\\Settings.ini','w') as settingsFile:
        settingsFile.writelines([f'{sett}\n' for sett in settingsList if sett != ''])


def select_custom_file(customLabel):
    with open('.\\Settings.ini','r+') as settingsFile:
        last_folder = settingsFile.read().split('\n')[1].rpartition('/')[0]
    
    filetypes = ( ('ASR files', '*.asr'),('All files', '*.*'))
    customized_path = askopenfilename(title='Select the source ASR',initialdir=last_folder,filetypes=filetypes)
    customLabel.config(text=customized_path)
    
    with open('.\\Settings.ini','r+') as settingsFile:
        settingsList = settingsFile.read().split('\n')
        settingsList[1] = customized_path
   
    with open('.\\Settings.ini','w') as settingsFile:
        settingsFile.writelines([f'{sett}\n' for sett in settingsList if sett != ''])


def compareASR(icao,profile_name):
    with open('Settings.ini','r') as settingsFile :
        settingsList = settingsFile.readlines()
    source_path, custom_path = settingsList[0].strip('\n'),settingsList[1].strip('\n')
    sourceFile = open(source_path,'r')
    customFile = open(custom_path,'r')
    sourceLines = sourceFile.readlines()
    customLines = customFile.readlines()
    sourceFile.close()
    customFile.close()
    
    newDataList = []
    
    for line in customLines:
        if line not in sourceLines and line[:11] != 'WINDOWAREA':
            newDataList.append(line)
    
    with open(f'Profiles\\{icao}.txt','a+') as profileFile:
        profileFile.write(f'\n&& {profile_name} &&\n\n')
        profileFile.writelines(newDataList)
        # Explicit flush to ensure the data is written
        profileFile.flush()

    # Ensure everything is completed before restarting
    print(f"Profile '{profile_name}' for ICAO '{icao}' updated successfully. Restarting the program now.")

    
    restart_program()


#----------------- Delete profile functions -------------------------

def deleteProfile():
    index = config_display_list.curselection()
    icao_index = icao_display_list.curselection()
    
    if index == ():
        promptWindow = Toplevel(fenetre)
        promptWindow.title(f'Error') 
        promptWindow.iconbitmap("radar.ico")
        
        Label(promptWindow, text=f"Please select a configuration first", font=("Helvetica", 12), padx=10, pady=10).pack(side=TOP)
    else:
        profile = config_display_list.get(index)
        
        delWindow = Toplevel(fenetre)
        delWindow.title(f'Delete {profile}') 
        delWindow.iconbitmap("radar.ico")
        
        delTitle = Label(delWindow, text=f"Delete {profile} ?", font=("Helvetica", 12), padx=10, pady=10).pack(side=TOP)
        
        cancelButton = Button(delWindow, text="Cancel", command=lambda: delWindow.destroy())
        cancelButton.pack(side=RIGHT, anchor='s', padx=5,pady=10)
        confirmButton = Button(delWindow, text="Confim", command=lambda: remove(profile,delWindow))
        confirmButton.pack(side=RIGHT, anchor='s', padx=5, pady=10)


def remove(profile, delWindow):
    
    icao_list = []
    
    for airport_nbr in range(len(airports)):
        file_path = r'{}'.format(airports[airport_nbr])
        configs = extract_sections(file_path)
        
        for config, text in configs.items():
            if config == profile:
                remove_section(file_path, config)
    
    delWindow.destroy()

            
def remove_section(file_path, section_name):
    # Open and read the entire file content
    with open(file_path, 'r') as file:
        content = file.read()

    # Define the regex pattern to match the section by its name
    # The pattern will search for the section header "&& Section Name &&" and its content
    pattern = r'&&\s*' + re.escape(section_name) + r'\s*&&.*?(?=(&&.*?&&|\Z))'
    
    # Replace the matched section with an empty string (i.e., remove it)
    updated_content = re.sub(pattern, '', content, flags=re.DOTALL).strip()

    if updated_content:  # If the file still has content after removal
        # Write the updated content back to the file
        with open(file_path, 'w') as file:
            file.write(updated_content)
    else:
        # If the content is empty after removal, delete the file
        os.remove(file_path)
        restart_program()


"""___________________________________________ User interface ___________________________________________"""

# ----------------- Creating UI -------------------------------
fenetre = Tk()
fenetre.iconbitmap("radar.ico")
fenetre.title('LiveASR')

p = PanedWindow(fenetre, orient=HORIZONTAL)

bottomframe = Frame(fenetre)
bottomframe.pack( side = BOTTOM )

icao_display_list = Listbox(p)
config_display_list = Listbox(p)
cb_display_list = Listbox(p) 


label = Label(fenetre, text="LiveASR", font=("Helvetica", 14), pady=10)
label.pack()

AsrButton=Button(bottomframe, text="Generate ASR", command=generateASR)
AsrButton.pack(side=LEFT,padx=5,pady=10)

resetButton=Button(bottomframe, text="Reset", command=resetASR)
resetButton.pack(side=LEFT,padx=5,pady=10)

newButton=Button(bottomframe, text="New", command=createProfile)
newButton.pack(side=LEFT,padx=5,pady=10)

deleteButton=Button(bottomframe, text="Delete", command=deleteProfile)
deleteButton.pack(side=RIGHT,padx=5,pady=10)

p.pack(side=TOP, expand=Y, fill=BOTH, pady=2, padx=2)
p.add(icao_display_list, width=50)
p.add(config_display_list, width=140)
p.add(cb_display_list, width=20)
p.pack()

icao_display_list.bind("<<ListboxSelect>>", airportSelection)
cb_display_list.bind("<<ListboxSelect>>", cbSelection)


# ---------------- Importing active profiles ------------------
airports = glob.glob(".\\Profiles\\*.txt")

with open('.\\ActiveProfiles.ini','r') as activeFile:
    activeList = activeFile.read().split('\n')
activeList.remove('')
sorted(activeList)

#----------------- Importing source ASR -------------------------
with open('.\\Source.asr','r') as sourceASR:
    defaultContent = sourceASR.read()

#----------------- Start function -------------------------
startUp()

#----------------- Closing actions -------------------------
with open('./ActiveProfiles.ini','w') as activeFile:
    activeFile.writelines([f'{act}\n' for act in activeList if act != ''])


fenetre.mainloop()



